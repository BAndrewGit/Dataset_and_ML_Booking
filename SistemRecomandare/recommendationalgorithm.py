# -*- coding: utf-8 -*-
"""RecommendationAlgorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eysYU5lgwEfOaIaW0jslUuTSYXr28_Bk
"""

import pandas as pd


df = pd.read_csv('clean_dataset.csv')

# Notațiile acordate de utilizator pentru fiecare categorie
user_ratings = {
    'Nota Personal': 3,
    'Nota Facilităţi': 2,
    'Nota Curăţenie': 5,
    'Nota Confort': 5,
    'Nota Raport calitate/preţ': 5,
    'Nota Locaţie': 1,
    'Nota WiFi gratuit': 1
}

# Verificăm dacă suma notelor acordate de utilizator nu depășește numărul maxim de puncte
if sum(user_ratings.values()) > 22:
    print('Suma notelor acordate de utilizator depășește numărul maxim de puncte.')
else:
    # Calculăm scorul de preferință pentru fiecare hotel
    for index, row in df.iterrows():
        preference_score = 0
        for category, user_rating in user_ratings.items():
            preference_score += row[category] * user_rating
        df.loc[index, 'preference_score'] = preference_score

# Lista dvs. de cazări preferate
preferred_accommodations = ['Cabana Sebes Bera', 'Casa de Vacanță S&B', 'Apartament doua camere Retro view']

from sklearn.cluster import KMeans

# Creăm un model KMeans cu un număr specific de clustere
kmeans = KMeans(n_clusters=5, n_init='auto')

# Antrenăm modelul cu datele noastre
kmeans.fit(df[['price', 'Nota Personal', 'Nota Facilităţi', 'Nota Curăţenie', 'Nota Confort', 'Nota Raport calitate/preţ', 'Nota Locaţie', 'Nota WiFi gratuit']])

# Adăugăm etichetele de cluster la DataFrame
df['cluster'] = kmeans.labels_

# Identificăm clusterul preferat
preferred_cluster = df[df['name'].isin(preferred_accommodations)]['cluster'].mode()[0]

# Filtrăm DataFrame-ul pentru a include doar hotelurile din clusterul preferat
df = df[df['cluster'] == preferred_cluster]

# Aplicam filtrele
max_budget = 200
df = df[df['price'] <= max_budget]

preferred_region = 'Braşov'
df = df[df['address/region'] == preferred_region]


# Identificăm facilitățile care sunt disponibile la cazări preferate
preferred_facilities = df[df['name'].isin(preferred_accommodations)].iloc[:, -37:].sum(axis=0)

# Calculăm scorul de potrivire a facilităților pentru fiecare hotel
for index, row in df.iterrows():
    matching_facilities_score = sum(row[-37:] * preferred_facilities)
    df.loc[index, 'preference_score'] += matching_facilities_score


# Afișăm primele 5 hoteluri cu cel mai mare scor de preferință
print(df.nlargest(5, 'preference_score'))

from sklearn.decomposition import TruncatedSVD
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# Selectați caracteristicile pe care doriți să le utilizați (de exemplu, ratingurile)
features = ['price', 'Nota Personal', 'Nota Facilităţi', 'Nota Curăţenie', 'Nota Confort', 'Nota Raport calitate/preţ', 'Nota Locaţie', 'Nota WiFi gratuit',
            'Frigider', 'Cadă sau duş', 'terasă', 'Factură disponibilă la cerere', 'Uscător de păr',  'Duş', 'Pardoseală de lemn sau parchet']

# Creați o matrice de caracteristici
X = df[features].values

# Aplicați SVD
svd = TruncatedSVD(n_components=5)
X_reduced = svd.fit_transform(X)

# Calculați similaritățile între hoteluri
similarities = cosine_similarity(X_reduced)

# Găsiți hotelurile cele mai similare cu primul hotel
top5_similar = np.argsort(similarities[0])[-6:-1][::-1]

# Afișați numele hotelurilor cele mai similare
print(df.iloc[top5_similar]['name'])